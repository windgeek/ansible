/*分布式表都建在astana中心*/
CREATE DATABASE IF NOT EXISTS k19_distribute;
CREATE DATABASE IF NOT EXISTS k19_ods;


CREATE TABLE k19_distribute.ntc_http_log(`region` LowCardinality(String), `log_id` String, `cfg_id` Int32, `found_time` UInt32, `recv_time` UInt32, `trans_proto` LowCardinality(String), `addr_type` LowCardinality(String), `d_ip` String, `s_ip` String,  `d_port` Int32, `s_port` Int32, `device_id` Int32 CODEC(T64),  `stream_dir` LowCardinality(String), `cap_ip` String, `msisdn` String CODEC(LZ4HC(9)), `imsi` String CODEC(LZ4HC(9)), `imei` String CODEC(LZ4HC(9)), `radius_account` String, `app_lable` LowCardinality(String), `protocol` LowCardinality(String),  url String,  req_body_file String,  req_body_key String,  res_body_file String,  res_body_key String,  website String,  proxy_flag LowCardinality(String),  req_method String,  req_uri String,  res_status_code String,  cookie String,  referer String,  user_agent String,  content_len String,  content_type String,  set_cookie String, `s_country` LowCardinality(String), `s_city` String CODEC(ZSTD(9)), `s_geo` String, `s_long` Float32, `s_lat` Float32, `d_country` LowCardinality(String),  `d_city` String CODEC(ZSTD(9)), `d_geo` String, `d_long` Float32, `d_lat` Float32) ENGINE =Distributed(clickhouse_tse_distribute_big, k19_ods, ntc_http_log_local, rand());

CREATE TABLE k19_distribute.ntc_lbs_log(`region` LowCardinality(String), `log_id` String, `cfg_id` Int32, `found_time` UInt32, `recv_time` UInt32, `trans_proto` LowCardinality(String), `addr_type` LowCardinality(String), `d_ip` String, `s_ip` String,  `d_port` Int32, `s_port` Int32, `device_id` Int32 CODEC(T64),  `stream_dir` LowCardinality(String), `cap_ip` String, `msisdn` String CODEC(LZ4HC(9)), `imsi` String CODEC(LZ4HC(9)), `imei` String CODEC(LZ4HC(9)), `radius_account` String, `app_lable` LowCardinality(String), `protocol` LowCardinality(String),  longitude String,  latitude String,  coordinate_type String,  geo_location String, geo_long Float32, geo_lat Float32) ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, ntc_lbs_log_local, rand());

CREATE TABLE k19_distribute.ntc_mail_log(`region` LowCardinality(String), `log_id` String, `cfg_id` Int32, `found_time` UInt32, `recv_time` UInt32, `trans_proto` LowCardinality(String), `addr_type` LowCardinality(String), `d_ip` String, `s_ip` String,  `d_port` Int32, `s_port` Int32, `device_id` Int32 CODEC(T64),  `stream_dir` LowCardinality(String), `cap_ip` String, `msisdn` String CODEC(LZ4HC(9)), `imsi` String CODEC(LZ4HC(9)), `imei` String CODEC(LZ4HC(9)), `radius_account` String, `app_lable` LowCardinality(String), `protocol` LowCardinality(String),  mail_from String,  mail_to String,  subject String,   eml_key String,  eml_file String,  mail_cc String, `s_country` LowCardinality(String), `s_city` String CODEC(ZSTD(9)), `s_geo` String, `s_long` Float32, `s_lat` Float32, `d_country` LowCardinality(String),  `d_city` String CODEC(ZSTD(9)), `d_geo` String, `d_long` Float32, `d_lat` Float32) ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, ntc_mail_log_local, rand());

CREATE TABLE k19_distribute.ntc_radius_log(`region` LowCardinality(String), `log_id` String, `cfg_id` Int32, `found_time` UInt32, `recv_time` UInt32, `trans_proto` LowCardinality(String), `addr_type` LowCardinality(String), `d_ip` String, `s_ip` String,  `d_port` Int32, `s_port` Int32, `device_id` Int32 CODEC(T64),  `stream_dir` LowCardinality(String), `cap_ip` String, `msisdn` String CODEC(LZ4HC(9)), `imsi` String CODEC(LZ4HC(9)), `imei` String CODEC(LZ4HC(9)), `radius_account` String, `app_lable` LowCardinality(String), `protocol` LowCardinality(String), code LowCardinality(String),  nas_ip String,  framed_ip String,  account String,  `s_country` LowCardinality(String), `s_city` String CODEC(ZSTD(9)), `s_geo` String, `s_long` Float32, `s_lat` Float32, `d_country` LowCardinality(String),  `d_city` String CODEC(ZSTD(9)), `d_geo` String, `d_long` Float32, `d_lat` Float32) ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, ntc_radius_log_local, rand());

CREATE TABLE k19_distribute.ntc_voip_log(`region` LowCardinality(String), `log_id` String, `cfg_id` Int32, `found_time` UInt32, `recv_time` UInt32, `trans_proto` LowCardinality(String), `addr_type` LowCardinality(String), `d_ip` String, `s_ip` String,  `d_port` Int32, `s_port` Int32, `device_id` Int32 CODEC(T64),  `stream_dir` LowCardinality(String), `cap_ip` String, `msisdn` String CODEC(LZ4HC(9)), `imsi` String CODEC(LZ4HC(9)), `imei` String CODEC(LZ4HC(9)), `radius_account` String, `app_lable` LowCardinality(String), `protocol` LowCardinality(String), rtp_d_ip String,  rtp_s_ip String,  rtp_d_port Int64,  rtp_s_port Int64,  from_to_store_url String,  to_from_store_url String,  duration String,  call_id String,   request_uri String,  calling_account String,  called_account String,  contacts String,  via String,  route String,  record_route String,  user_agent String,  server String, `s_country` LowCardinality(String), `s_city` String CODEC(ZSTD(9)), `s_geo` String, `s_long` Float32, `s_lat` Float32, `d_country` LowCardinality(String),  `d_city` String CODEC(ZSTD(9)), `d_geo` String, `d_long` Float32, `d_lat` Float32,`rtp_key` String, `s_rtp_key` String) ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, ntc_voip_log_local, rand());

CREATE TABLE k19_distribute.ntc_ip_log(`region` LowCardinality(String), `log_id` String, `cfg_id` Int32, `found_time` UInt32, `recv_time` UInt32, `trans_proto` LowCardinality(String), `addr_type` LowCardinality(String), `d_ip` String, `s_ip` String,  `d_port` Int32, `s_port` Int32, `device_id` Int32 CODEC(T64),  `stream_dir` LowCardinality(String), `cap_ip` String, `msisdn` String CODEC(LZ4HC(9)), `imsi` String CODEC(LZ4HC(9)), `imei` String CODEC(LZ4HC(9)), `radius_account` String, `app_lable` LowCardinality(String), `protocol` LowCardinality(String), `c2s_pkt_num` String, `s2c_pkt_num` String, `c2s_byte_num` String,  `s2c_byte_num` String, `s_country` LowCardinality(String), `s_city` String CODEC(ZSTD(9)), `s_geo` String, `s_long` Float32, `s_lat` Float32, `d_country` LowCardinality(String),  `d_city` String CODEC(ZSTD(9)), `d_geo` String, `d_long` Float32, `d_lat` Float32) ENGINE =Distributed(clickhouse_tse_distribute_big, k19_ods, ntc_ip_log_local, rand());

CREATE TABLE k19_distribute.ntc_nat_log(`region` LowCardinality(String), `log_id` String, `cfg_id` Int32, `found_time` UInt32, `recv_time` UInt32, `trans_proto` LowCardinality(String), `addr_type` LowCardinality(String), `d_ip` String, `s_ip` String,  `d_port` Int32, `s_port` Int32, `device_id` Int32 CODEC(T64),  `stream_dir` LowCardinality(String), `cap_ip` String, `msisdn` String CODEC(LZ4HC(9)), `imsi` String CODEC(LZ4HC(9)), `imei` String CODEC(LZ4HC(9)), `radius_account` String, `app_lable` LowCardinality(String), `protocol` LowCardinality(String), `proto` LowCardinality(String), `operator` Int64, `ip_version` LowCardinality(String), `src_ip` String, `src_natip` String, `dest_ip` String, `dest_natip` String, `src_port` Int64, `src_natport` Int64, `dest_port` Int64, `dest_natport` Int64, `start_time` Int64, `end_time` Int64, `in_totalpkg` Int64, `in_totalbyte` Int64, `out_totalpkg` Int64, `out_totalbyte` Int64, `src_vpn` String, `dst_vpn` String) ENGINE = Distributed(clickhouse_tse_distribute_small, k19_ods, ntc_nat_log_local, rand());

CREATE TABLE k19_distribute.dm_conv_log( `region` LowCardinality(String), `log_id` LowCardinality(String),   source_unit_name String,  found_time UInt32,  end_time UInt32,  client_ip String,  server_ip String,  service_id String,  lineid String,  pipe_id String,  vcid String,  instance_type String,  instance_key_1 String,  instance_key_2 String,  net_unit_id String,  client_device_name String,  client_device_class String,  client_device_vendor String,  client_device_model String,  client_device_os_name String,  client_device_os_fullVersion String,  client_device_os_majorVersion String,  tethering_indication String,  next_hop_as String,  destination_as String,  monitored_service_group_id String,  rating_group String,  session_rat String,  live_connections String,  new_connections String,  packets_in String,  packets_out String,  octets_in String,  octets_out String,  network_activity_time_sec Int64,  retransmitted_tcp_data_segments_in String,   total_tcp_data_segments_in String,  retransmitted_tcp_data_segments_out String,  total_tcp_data_segments_out String,  rttEstimate_external_avg_m_sec Int64,rttEstimate_external_sum_m_sec Int64,  rttEstimate_externa_events_m_sec Int64,  rttEstimate_internal_avg_m_sec Int64,  rttEstimate_internal_sum_m_sec Int64,rttEstimate_interna_events_m_sec Int64,  max_bandwidth_kbps Int64,  min_bandwidth_kbps Int64,  voip_session_duration String,  qos_dropped_packets_in String,qos_dropped_packets_out String,  qos_dropped_octets_in String,  qos_dropped_octets_out String,   `s_country` LowCardinality(String), `s_city` String CODEC(ZSTD(9)), `s_geo` String, `s_long` Float32, `s_lat` Float32, `d_country` LowCardinality(String),  `d_city` String CODEC(ZSTD(9)), `d_geo` String, `d_long` Float32, `d_lat` Float32)ENGINE =Distributed(clickhouse_tse_distribute_big, k19_ods, dm_conv_log_local, rand());

CREATE TABLE k19_distribute.ntc_vpn_log(`region` LowCardinality(String), `log_id` String, `cfg_id` Int32, `found_time` UInt32, `recv_time` UInt32, `trans_proto` LowCardinality(String), `addr_type` LowCardinality(String), `d_ip` String, `s_ip` String,  `d_port` Int32, `s_port` Int32, `device_id` Int32 CODEC(T64),  `stream_dir` LowCardinality(String), `cap_ip` String, `msisdn` String CODEC(LZ4HC(9)), `imsi` String CODEC(LZ4HC(9)), `imei` String CODEC(LZ4HC(9)), `radius_account` String, `app_lable` LowCardinality(String), `protocol` LowCardinality(String), tunel_type LowCardinality(String), ex_protocol LowCardinality(String), hmac String, openvpn_encrypt_mode String, ssh_version String, ssh_software String, `s_country` LowCardinality(String), `s_city` String CODEC(ZSTD(9)), `s_geo` String, `s_long` Float32, `s_lat` Float32, `d_country` LowCardinality(String),  `d_city` String CODEC(ZSTD(9)), `d_geo` String, `d_long` Float32, `d_lat` Float32)ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, ntc_vpn_log_local, rand());

--预聚合表
CREATE TABLE k19_distribute.ntc_ip_log_group_s_ip (`s_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_big', 'k19_ods', 'ntc_ip_log_local_group_s_ip', cityHash64(s_ip));
CREATE TABLE k19_distribute.ntc_ip_log_group_d_ip (`d_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_big', 'k19_ods', 'ntc_ip_log_local_group_d_ip', cityHash64(d_ip));
CREATE TABLE k19_distribute.ntc_ip_log_group_radius_account (`radius_account` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_big', 'k19_ods', 'ntc_ip_log_local_group_radius_account', cityHash64(radius_account));
CREATE TABLE k19_distribute.ntc_http_log_group_s_ip (`s_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_big', 'k19_ods', 'ntc_http_log_local_group_s_ip', cityHash64(s_ip));
CREATE TABLE k19_distribute.ntc_http_log_group_d_ip (`d_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_big', 'k19_ods', 'ntc_http_log_local_group_d_ip', cityHash64(d_ip));
CREATE TABLE k19_distribute.ntc_http_log_group_radius_account (`radius_account` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_big', 'k19_ods', 'ntc_http_log_local_group_radius_account', cityHash64(radius_account));
CREATE TABLE k19_distribute.ntc_http_log_group_website (`website` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_big', 'k19_ods', 'ntc_http_log_local_group_website', cityHash64(website));
CREATE TABLE k19_distribute.dm_conv_log_group_client_ip (`client_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_big', 'k19_ods', 'dm_conv_log_local_group_client_ip', cityHash64(client_ip));
CREATE TABLE k19_distribute.dm_conv_log_group_server_ip (`server_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_big', 'k19_ods', 'dm_conv_log_local_group_server_ip', cityHash64(server_ip));
CREATE TABLE k19_distribute.ntc_mail_log_group_s_ip (`s_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_small', 'k19_ods', 'ntc_mail_log_local_group_s_ip', cityHash64(s_ip));
CREATE TABLE k19_distribute.ntc_mail_log_group_d_ip (`d_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_small', 'k19_ods', 'ntc_mail_log_local_group_d_ip', cityHash64(d_ip));
CREATE TABLE k19_distribute.ntc_mail_log_group_mail_from (`mail_from` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_small', 'k19_ods', 'ntc_mail_log_local_group_mail_from', cityHash64(mail_from));
CREATE TABLE k19_distribute.ntc_mail_log_group_mail_to (`mail_to` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_tse_distribute_small', 'k19_ods', 'ntc_mail_log_local_group_mail_to', cityHash64(mail_to));


/**
--CREATE TABLE k19_distribute.dm_hdr_log( region String,  log_id String,  source_unit_name String,  found_time Int64,  subscriber_id String,  session_key String,  client_ip String,  client_port Int64,  server_ip String,  server_port Int64,  service_id String,  http_method String,  request_header_host String,  uri String,  download_content_length Int64,  upload_content_length Int64,  request_actual_byte_count Int64,  response_actual_byte_count Int64,  response_code Int64,  server_initial_response_time Int64,  duration Int64,  request_header_dnt_x_do_not_track String,  request_header_user_agent String,  request_header_referer String,  response_header_content_type String,  l5protocol String,  client_device_name String,  client_device_class String,  client_device_vendor String,  client_device_model String,  client_device_os_name String,  client_device_os_FullVersion String,  client_device_os_major_version String,  line_id String,  pipe_id String,  vcid String,  cdn String,  imsi String,  imeisv String,  action String,  s_country String,  s_city String,  s_geo String,  s_long Float64, s_lat Float64, d_country String,  d_city String,  d_geo String, d_long Float64, d_lat Float64) ENGINE = Distributed(clickhouse_tse_distribute_small, k19_ods, dm_hdr_log_local, rand());
**/

/**移动运营商 网络行为分析**/
CREATE TABLE k19_distribute.dream_http_log (`log_id` String,`action` Int64, `version` Int64, `uri` String, `domain` String, `found_time` UInt32, `msisdn` String, `source_ip` String) ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, dream_http_log_local, rand());
CREATE TABLE k19_distribute.dream_cdr_log (`log_id` String,`record_type` LowCardinality(String), `record_id` Int64, `start_timestamp` String, `calling_party_number` String, `called_party_number` String, `redirecting_number` String, `call_id_number` Int64, `supplementary_services` String, `cause` Int16, `calling_party_category` Int16, `call_duration` Int64, `call_status` Int16, `connected_number` String, `imsi_calling` String, `imei_calling` String, `imsi_called` String, `imei_called` String, `msisdn_calling` String, `msisdn_called` String, `msc_number` String, `vlr_number` String, `location_lac` Int64, `location_cell` Int64, `forwarding_reason` Int16, `roaming_number` String, `ss_code` String, `ussd` String, `operator_id` Int64, `date_and_time` String, `call_direction` Int16, `ll` String, `found_time` UInt32, `recv_time` UInt32,`region` LowCardinality(String), `radio_type` LowCardinality(String), `geo_long` Float32, `geo_lat` Float32) ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, dream_cdr_log_local, rand());
CREATE TABLE k19_distribute.dream_user_profile_log (`log_id` String,`idOfSubscriber` String, `found_time` UInt32, `name` String, `msisdn` String, `imsi` String, `imei` String, `addressOfRegistration` String, `passport` String,passport_number String, `dateOfBirth` String, `inn` String, `contactPerson` String, `contactPhonenumber` String, `dateOfSimActivation` String, `dateOfSimStatusInit` String, `statusOfSim` LowCardinality(String), `radio_type` LowCardinality(String), `dateAndTimeOfAct` String, `subscriberActivationDate` String, `bin` String, `ndsCertificate` String, `contractConclusionDate` String, `email` String,`region` LowCardinality(String)) ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, dream_user_profile_log_local, rand());
CREATE TABLE k19_distribute.dream_vlr_log (`log_id` String,`msisdn` String, `imsi` String, `imei` String, `mnc` String, `mcc` String, `lac` Int64, `cell` Int64, `old_location_lac` Int64, `old_location_cell` Int64, `date_and_time` String, `location_update_type` LowCardinality(String), `ll` String, `ll_old` String, `switchgear_type` LowCardinality(String), `found_time` UInt32, `recv_time` UInt32,`region` LowCardinality(String), `radio_type` LowCardinality(String), `geo_long` Float32, `geo_lat` Float32) ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, dream_vlr_log_local, rand());
CREATE TABLE k19_distribute.dream_sms_log (`log_id` String,`record_type` LowCardinality(String), `record_id` Int64, `start_timestamp` String, `calling_party_number` String, `called_party_number` String, `redirecting_number` String, `call_id_number` String, `supplementary_services` String, `cause` Int16, `calling_party_category` Int16, `call_duration` Int64, `call_status` Int16, `connected_number` String, `imsi_calling` String, `imei_calling` String, `imsi_called` String, `imei_called` String, `msisdn_calling` String, `msisdn_called` String, `msc_number` String, `vlr_number` String, `location_lac` Int64, `location_cell` Int64, `forwarding_reason` Int16, `roaming_number` String, `ss_code` String, `ussd` String, `operator_id` Int64, `date_and_time` String, `call_direction` Int16, `ll` String, `found_time` UInt32, `recv_time` UInt32,`region` LowCardinality(String), `radio_type` LowCardinality(String), `geo_long` Float32, `geo_lat` Float32) ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, dream_sms_log_local, rand());
CREATE TABLE k19_distribute.dream_email_log (`log_id` String,`found_time` UInt32, `msisdn_calling` String, `protocol` String, `source_ip` String, `source_port` Int64, `dst_ip` String, `dst_port` Int64, `msg_id` Int64, `subject` String, `from` String, `to` String, `reply_to` String, `cc` String, `bcc` String, `received` String, `return_path` String, `comments` String, `in_reply_to` String, `content_type` String, `filenames` String) ENGINE =Distributed(clickhouse_tse_distribute_small, k19_ods, dream_email_log_local, rand());


CREATE TABLE k19_distribute.ck_query_log ( type UInt8,  event_date Date,  event_time DateTime,  query_start_time DateTime,  query_duration_ms UInt64,  read_rows UInt64,  read_bytes UInt64,  written_rows UInt64,  written_bytes UInt64,  result_rows UInt64,  result_bytes UInt64,  memory_usage UInt64,  query String,  exception String,  stack_trace String,  is_initial_query UInt8,  user String,  query_id String,  address FixedString(16),  port UInt16,  initial_user String,  initial_query_id String,  initial_address FixedString(16),  initial_port UInt16,  interface UInt8,  os_user String,  client_hostname String,  client_name String,  client_revision UInt32,  http_method UInt8,  http_user_agent String,  quota_key String,  revision UInt32) ENGINE = Distributed(clickhouse_distribute_all, system,query_log);
CREATE TABLE k19_distribute.ck_parts (`partition` String, `name` String, `active` UInt8, `marks` UInt64, `rows` UInt64, `bytes_on_disk` UInt64, `data_compressed_bytes` UInt64, `data_uncompressed_bytes` UInt64, `marks_bytes` UInt64, `modification_time` DateTime, `remove_time` DateTime, `refcount` UInt32, `min_date` Date, `max_date` Date, `min_time` DateTime, `max_time` DateTime, `partition_id` String, `min_block_number` Int64, `max_block_number` Int64, `level` UInt32, `data_version` UInt64, `primary_key_bytes_in_memory` UInt64, `primary_key_bytes_in_memory_allocated` UInt64, `is_frozen` UInt8, `database` String, `table` String, `engine` String, `disk_name` String, `path` String, `hash_of_all_files` String, `hash_of_uncompressed_files` String, `uncompressed_hash_of_compressed_files` String, `bytes` UInt64, `marks_size` UInt64) ENGINE = Distributed(clickhouse_distribute_all, system, parts);
CREATE TABLE k19_distribute.ck_all_replicas (`database` String, `table` String, `engine` String, `is_leader` UInt8, `can_become_leader` UInt8, `is_readonly` UInt8, `is_session_expired` UInt8, `future_parts` UInt32, `parts_to_check` UInt32, `zookeeper_path` String, `replica_name` String, `replica_path` String, `columns_version` Int32, `queue_size` UInt32, `inserts_in_queue` UInt32, `merges_in_queue` UInt32, `part_mutations_in_queue` UInt32, `queue_oldest_time` DateTime, `inserts_oldest_time` DateTime, `merges_oldest_time` DateTime, `part_mutations_oldest_time` DateTime, `oldest_part_to_get` String, `oldest_part_to_merge_to` String, `oldest_part_to_mutate_to` String, `log_max_index` UInt64, `log_pointer` UInt64, `last_queue_update` DateTime, `absolute_delay` UInt64, `total_replicas` UInt8, `active_replicas` UInt8) ENGINE = Distributed('clickhouse_distribute_all', 'system', 'replicas', rand());
CREATE TABLE k19_distribute.replicas_tse_small_log (`database` String, `table` String, `engine` String, `is_leader` UInt8, `can_become_leader` UInt8, `is_readonly` UInt8, `is_session_expired` UInt8, `future_parts` UInt32, `parts_to_check` UInt32, `zookeeper_path` String, `replica_name` String, `replica_path` String, `columns_version` Int32, `queue_size` UInt32, `inserts_in_queue` UInt32, `merges_in_queue` UInt32, `part_mutations_in_queue` UInt32, `queue_oldest_time` DateTime, `inserts_oldest_time` DateTime, `merges_oldest_time` DateTime, `part_mutations_oldest_time` DateTime, `oldest_part_to_get` String, `oldest_part_to_merge_to` String, `oldest_part_to_mutate_to` String, `log_max_index` UInt64, `log_pointer` UInt64, `last_queue_update` DateTime, `absolute_delay` UInt64, `total_replicas` UInt8, `active_replicas` UInt8) ENGINE = Distributed('clickhouse_tse_local_small', 'system', 'replicas', rand());
CREATE TABLE k19_distribute.replicas_ala_small_log (`database` String, `table` String, `engine` String, `is_leader` UInt8, `can_become_leader` UInt8, `is_readonly` UInt8, `is_session_expired` UInt8, `future_parts` UInt32, `parts_to_check` UInt32, `zookeeper_path` String, `replica_name` String, `replica_path` String, `columns_version` Int32, `queue_size` UInt32, `inserts_in_queue` UInt32, `merges_in_queue` UInt32, `part_mutations_in_queue` UInt32, `queue_oldest_time` DateTime, `inserts_oldest_time` DateTime, `merges_oldest_time` DateTime, `part_mutations_oldest_time` DateTime, `oldest_part_to_get` String, `oldest_part_to_merge_to` String, `oldest_part_to_mutate_to` String, `log_max_index` UInt64, `log_pointer` UInt64, `last_queue_update` DateTime, `absolute_delay` UInt64, `total_replicas` UInt8, `active_replicas` UInt8) ENGINE = Distributed('clickhouse_ala_local_small', 'system', 'replicas', rand());
-- --每张表每小时新增
-- CREATE MATERIALIZED VIEW k19_ods.table_hour_increament_materialized_view_local (`eventtime` DateTime, `table` String, `rows` UInt64) ENGINE = SummingMergeTree(rows) PARTITION BY toYYYYMM(eventtime) ORDER BY (eventtime, table) TTL eventtime+INTERVAL 90 DAY SETTINGS index_granularity = 8192 POPULATE AS SELECT toDateTime(toRelativeHourNum(min(event_time)) * 3600) AS eventtime, concat(database, '.', table) AS table, sum(rows) AS rows FROM system.part_log WHERE event_type = 1 GROUP BY database, table, toRelativeHourNum(event_time) ORDER BY database ASC, table ASC, toRelativeHourNum(event_time) ASC;
-- --每张表每天新增
-- CREATE MATERIALIZED VIEW k19_ods.table_day_increament_materialized_view_local (`eventtime` DateTime, `table` String, `rows` UInt64) ENGINE = SummingMergeTree(rows) PARTITION BY toYYYYMM(eventtime) ORDER BY (eventtime, table) TTL eventtime+INTERVAL 90 DAY SETTINGS index_granularity = 8192 POPULATE AS SELECT toDate(event_time) AS eventtime, concat(database, '.', table) AS table, sum(rows) AS rows FROM system.part_log WHERE event_type = 1 GROUP BY database, table, toDate(event_time) ORDER BY database ASC, table ASC, toDate(event_time) ASC;

CREATE TABLE k19_distribute.ck_hour_increament_materialized_view (`eventtime` DateTime, `table` String, `rows` UInt64) ENGINE = Distributed('clickhouse_distribute_all', 'k19_ods', 'table_hour_increament_materialized_view_local');
CREATE TABLE k19_distribute.ck_day_increament_materialized_view (`eventtime` DateTime, `table` String, `rows` UInt64) ENGINE = Distributed('clickhouse_distribute_all', 'k19_ods', 'table_day_increament_materialized_view_local');

 --非系统表非监控视图非QueryStart的SELECT的平均响应时间
--CREATE VIEW k19_distribute.table_select_response_every_day (`eventtime` DateTime, `response` Float64) AS SELECT eventtime, response FROM (SELECT any(event_time) AS eventtime, avg(query_duration_ms) AS response FROM k19_distribute.query_log WHERE startsWith(query, 'SELECT') AND (startsWith(extract(query, 'SELECT .* FROM (.*)'), 'system') = 0) AND (startsWith(extract(query, 'SELECT .* FROM (.*)'), '(') = 0) AND (startsWith(extract(query, 'SELECT .* FROM (.*)'), 'k19_distribute.query_log') = 0) AND (startsWith(query, 'SELECT 1') = 0) AND (startsWith(extract(query, 'SELECT .* FROM (.*)'), 'k19_ods.table') = 0) AND (endsWith(extract(query, 'SELECT .* FROM (.*)'), '_view') = 0) AND (type IN (2, 4)) GROUP BY toDate(event_time))  select any(event_time)eventtime,avg(query_duration_ms) from k19_distribute.query_log    where startsWith(query ,'SELECT') and startsWith(extract(query,'SELECT .* FROM (.*)'),'system')=0  and startsWith(extract(query,'SELECT .* FROM (.*)'),'(')=0   and startsWith(extract(query,'SELECT .* FROM (.*)'),'k19_distribute.query_log')=0  and startsWith(query,'SELECT 1')=0  and startsWith(extract(query,'SELECT .* FROM (.*)'),'k19_ods.table')=0   and endsWith(extract(query,'SELECT .* FROM (.*)'),'_view')=0  and type in (2,4)  group by toDate(event_time);  
  --非系统表非监控视图非QueryStart的INSERT的平均响应时间
--CREATE VIEW k19_distribute.table_insert_response_every_day (`eventtime` DateTime, `response` Float64) AS  select any(event_time)eventtime,avg(query_duration_ms)response from k19_distribute.query_log   where startsWith(query ,'INSERT') and startsWith(extract(query,'SELECT .* FROM (.*)'),'system')=0  and type in (2,4)  group by toDate(event_time);

----非系统表非视图非SELECT 1，非optimize剩下的insert和select语句并且加上了sql执行所在机器的serverIp
CREATE TABLE k19_ods.ck_slow_query_log_local (`eventDate` Date, `startTime` DateTime, `status` LowCardinality(String), `useSeconds` Float64, `readRows` UInt64, `resultRows` UInt64, `writeRows` UInt64, `writtenMB` Float64, `memoryUsageMB` Float64, `tableName` LowCardinality(String),`clusterName` LowCardinality(String), `serverName` LowCardinality(String), `serverIp` LowCardinality(String), `initial_query_id` UUID, `query_id` UUID, `queryFromHost` LowCardinality(String), `query` String,exception String,stack_trace String)  ENGINE =ReplacingMergeTree() PARTITION BY toYYYYMM(startTime) ORDER BY (startTime,status,clusterName,tableName,serverIp,query_id) TTL startTime+INTERVAL 90 DAY;

CREATE TABLE k19_distribute.ck_slow_query_log(`eventDate` Date, `startTime` DateTime, `status` LowCardinality(String), `useSeconds` Float64, `readRows` UInt64, `resultRows` UInt64, `writeRows` UInt64, `writtenMB` Float64, `memoryUsageMB` Float64, `tableName` LowCardinality(String),`clusterName` LowCardinality(String), `serverName` LowCardinality(String), `serverIp` LowCardinality(String), `initial_query_id` UUID, `query_id` UUID, `queryFromHost` LowCardinality(String), `query` String,exception String,stack_trace String) ENGINE = Distributed('clickhouse_distribute_all', 'k19_ods', 'ck_slow_query_log_local');


/**网络行为分析,这里使用的是otherlog集群**/
-- CREATE DATABASE IF NOT EXISTS zt_distribute;
--
-- -- DROP TABLE IF EXISTS zt_distribute.cdr;
-- CREATE TABLE zt_distribute.cdr (   record_type String,   record_id String,   found_time Int64,   calling_party_number String,   called_party_number String,   redirecting_number String,   call_id_number String,   supplementary_services String,   cause String,   calling_party_category String,   call_duration String,   call_status String,   connected_number String,   imsi_calling String,   imei_calling String,   imsi_called String,   imei_called String,   msisdn_calling String,   msisdn_called String,   msc_number String,   vlr_number String,   location_lac String,   location_cell String,   forwarding_reason String,   roaming_number String,   ss_code String,   ussd String,   operator_id String,   date_and_time Int64,   call_direction String,   ll String ) ENGINE = Distributed(clickhouse_tse_distribute_small, zt, cdr_local, rand());
--
-- -- DROP TABLE IF EXISTS zt_distribute.email ;
-- CREATE TABLE zt_distribute.email (   found_time Int64,   msisdn_calling String,   protocol String,   source_ip String,   source_port Int64,   dst_ip String,   dst_port Int64,   msg_id Int64,   subject String,   from     String,     to String,     reply_to String,     cc String,     bcc String,     received String,     return_path String,     comments String,     in_reply_to String,     content_type String,     filenames String ) ENGINE = Distributed(clickhouse_tse_distribute_small, zt, email_local, rand());
--
-- -- DROP TABLE IF EXISTS zt_distribute.http ;
-- CREATE TABLE zt_distribute.http (   action Int64,   version Int64,   uri String,   domain String,   found_time Int64,   msisdn String,   source_ip String ) ENGINE = Distributed(clickhouse_tse_distribute_small, zt, http_local, rand());
--
-- -- DROP TABLE IF EXISTS zt_distribute.loc;
-- CREATE TABLE zt_distribute.loc (   msisdn String,   lac Int64,   cell Int64,   found_time Int64,   loc_type Int64,   imsi String,   imei String,   ll String,   switchgear_type String ) ENGINE = Distributed(clickhouse_tse_distribute_small, zt, loc_local, rand());

--系统表加上过期时间
ALTER TABLE system.metric_log MODIFY TTL event_time + toIntervalDay(90);
ALTER TABLE system.part_log MODIFY TTL event_time + toIntervalDay(90);
ALTER TABLE system.query_log MODIFY TTL event_time + toIntervalDay(90);
ALTER TABLE system.query_thread_log MODIFY TTL event_time + toIntervalDay(90);
-- ALTER TABLE system.text_log MODIFY TTL event_time + toIntervalDay(90);
ALTER TABLE system.trace_log MODIFY TTL event_time + toIntervalDay(90);
