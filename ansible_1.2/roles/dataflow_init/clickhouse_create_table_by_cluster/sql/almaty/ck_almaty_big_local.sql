CREATE DATABASE IF NOT EXISTS k19_ods;
CREATE DATABASE IF NOT EXISTS k19_distribute;

CREATE TABLE k19_ods.ntc_ip_log_local (`region` LowCardinality(String), `log_id` String, `cfg_id` Int32, `found_time` UInt32, `recv_time` UInt32, `trans_proto` LowCardinality(String), `addr_type` LowCardinality(String), `d_ip` String, `s_ip` String,  `d_port` Int32, `s_port` Int32, `device_id` Int32 CODEC(T64),  `stream_dir` LowCardinality(String), `cap_ip` String, `msisdn` String CODEC(LZ4HC(9)), `imsi` String CODEC(LZ4HC(9)), `imei` String CODEC(LZ4HC(9)), `radius_account` String, `app_lable` LowCardinality(String), `protocol` LowCardinality(String), `c2s_pkt_num` String, `s2c_pkt_num` String, `c2s_byte_num` String, `s2c_byte_num` String, `s_country` LowCardinality(String), `s_city` String, `s_geo` String, `s_long` Float32, `s_lat` Float32, `d_country` LowCardinality(String), `d_city` String, `d_geo` String, `d_long` Float32, `d_lat` Float32,  INDEX s_ip_idx1 s_ip TYPE bloom_filter() GRANULARITY 4,  INDEX d_ip_bl_idx d_ip TYPE bloom_filter() GRANULARITY 4,  INDEX radius_account_bl_idx radius_account TYPE bloom_filter() GRANULARITY 4) ENGINE = MergeTree() PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (found_time, s_ip, s_city, s_long, s_lat, d_ip,d_city, d_long, d_lat) TTL toDateTime(found_time) + toIntervalDay(90) SETTINGS index_granularity = 8192, merge_with_ttl_timeout = 86400, old_parts_lifetime = 60;

CREATE TABLE k19_ods.ntc_http_log_local (`region` LowCardinality(String), `log_id` String, `cfg_id` Int32, `found_time` UInt32, `recv_time` UInt32, `trans_proto` LowCardinality(String), `addr_type` LowCardinality(String), `d_ip` String, `s_ip` String,  `d_port` Int32, `s_port` Int32, `device_id` Int32 CODEC(T64),  `stream_dir` LowCardinality(String), `cap_ip` String, `msisdn` String CODEC(LZ4HC(9)), `imsi` String CODEC(LZ4HC(9)), `imei` String CODEC(LZ4HC(9)), `radius_account` String, `app_lable` LowCardinality(String), `protocol` LowCardinality(String),  url String,  req_body_file String,  req_body_key String,  res_body_file String,  res_body_key String,  website String,  proxy_flag LowCardinality(String),  req_method String,  req_uri String,  res_status_code LowCardinality(String),  cookie String,  referer String,  user_agent String,  content_len String,  content_type LowCardinality(String),  set_cookie String, `s_country` LowCardinality(String), `s_city` String CODEC(ZSTD(9)), `s_geo` String, `s_long` Float32, `s_lat` Float32, `d_country` LowCardinality(String),  `d_city` String CODEC(ZSTD(9)), `d_geo` String, `d_long` Float32, `d_lat` Float32, INDEX s_ip_idx1 s_ip TYPE bloom_filter() GRANULARITY 4, INDEX d_ip_bl_idx d_ip TYPE bloom_filter() GRANULARITY 4)  ENGINE = MergeTree() PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (found_time, s_ip, s_city, s_long, s_lat, d_ip,d_city, d_long, d_lat) TTL toDateTime(found_time)+INTERVAL 90 DAY  SETTINGS index_granularity = 8192, merge_with_ttl_timeout=86400, old_parts_lifetime = 60;

CREATE TABLE k19_ods.dm_conv_log_local (`region` LowCardinality(String), `log_id` LowCardinality(String),source_unit_name String,  found_time UInt32,  end_time UInt32,  client_ip String,  server_ip String,  service_id String,  lineid String,  pipe_id String,  vcid String,  instance_type String,  instance_key_1 String,  instance_key_2 String,  net_unit_id String,  client_device_name String,  client_device_class String,  client_device_vendor String,  client_device_model String,  client_device_os_name String,  client_device_os_fullVersion String,  client_device_os_majorVersion String,  tethering_indication String,  next_hop_as String,  destination_as String,  monitored_service_group_id String,  rating_group String,  session_rat String,  live_connections String,  new_connections String,  packets_in String,  packets_out String,  octets_in String,  octets_out String,  network_activity_time_sec Int64,  retransmitted_tcp_data_segments_in String,total_tcp_data_segments_in String,  retransmitted_tcp_data_segments_out String,  total_tcp_data_segments_out String,  rttEstimate_external_avg_m_sec Int64, rttEstimate_external_sum_m_sec Int64,  rttEstimate_externa_events_m_sec Int64,  rttEstimate_internal_avg_m_sec Int64,  rttEstimate_internal_sum_m_sec Int64, rttEstimate_interna_events_m_sec Int64,  max_bandwidth_kbps Int64,  min_bandwidth_kbps Int64,  voip_session_duration String,  qos_dropped_packets_in String, qos_dropped_packets_out String,  qos_dropped_octets_in String,  qos_dropped_octets_out String,`s_country` LowCardinality(String), `s_city` String, `s_geo` String, `s_long` Float32, `s_lat` Float32, `d_country` LowCardinality(String), `d_city` String, `d_geo` String, `d_long` Float32, `d_lat` Float32) ENGINE = MergeTree() PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY found_time TTL toDateTime(found_time)+INTERVAL 90 DAY  SETTINGS index_granularity = 8192, merge_with_ttl_timeout=86400, old_parts_lifetime = 60;

--预聚合表
CREATE TABLE k19_ods.ntc_ip_log_local_group_s_ip (`s_ip` String, `found_time` UInt32 CODEC(T64), `cnt` UInt32 CODEC(T64)) ENGINE = SummingMergeTree(cnt) PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (s_ip, found_time) TTL toDateTime(found_time) + toIntervalDay(90) SETTINGS index_granularity = 8192, merge_with_ttl_timeout = 86400, old_parts_lifetime = 60, parts_to_delay_insert = 2000, parts_to_throw_insert = 3000;
CREATE MATERIALIZED VIEW k19_ods.ntc_ip_log_local_group_s_ip_view (`s_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Buffer('k19_distribute', 'ntc_ip_log_group_s_ip', 2,  60, 120, 2000000, 4000000, 41943040, 104857600) AS SELECT s_ip, floor(found_time / 300) * 300 AS found_time, 1 AS cnt FROM k19_ods.ntc_ip_log_local;
CREATE TABLE k19_distribute.ntc_ip_log_group_s_ip (`s_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_ala_local_big', 'k19_ods', 'ntc_ip_log_local_group_s_ip', cityHash64(s_ip));

CREATE TABLE k19_ods.ntc_ip_log_local_group_d_ip (`d_ip` String, `found_time` UInt32 CODEC(T64), `cnt` UInt32 CODEC(T64)) ENGINE = SummingMergeTree(cnt) PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (d_ip, found_time) TTL toDateTime(found_time) + toIntervalDay(90) SETTINGS index_granularity = 8192, merge_with_ttl_timeout = 86400, old_parts_lifetime = 60, parts_to_delay_insert = 2000, parts_to_throw_insert = 3000;
CREATE MATERIALIZED VIEW k19_ods.ntc_ip_log_local_group_d_ip_view (`d_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Buffer('k19_distribute', 'ntc_ip_log_group_d_ip', 2,  60, 120, 2000000, 4000000, 41943040, 104857600) AS SELECT d_ip, floor(found_time / 300) * 300 AS found_time, 1 AS cnt FROM k19_ods.ntc_ip_log_local;
CREATE TABLE k19_distribute.ntc_ip_log_group_d_ip (`d_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_ala_local_big', 'k19_ods', 'ntc_ip_log_local_group_d_ip', cityHash64(d_ip));

CREATE TABLE k19_ods.ntc_ip_log_local_group_radius_account (`radius_account` String, `found_time` UInt32 CODEC(T64), `cnt` UInt32 CODEC(T64)) ENGINE = SummingMergeTree(cnt) PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (radius_account, found_time) TTL toDateTime(found_time) + toIntervalDay(90) SETTINGS index_granularity = 8192, merge_with_ttl_timeout = 86400, old_parts_lifetime = 60, parts_to_delay_insert = 2000, parts_to_throw_insert = 3000;
CREATE MATERIALIZED VIEW k19_ods.ntc_ip_log_local_group_radius_account_view (`radius_account` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Buffer('k19_distribute', 'ntc_ip_log_group_radius_account', 2,  60, 120, 2000000, 4000000, 41943040, 104857600) AS SELECT radius_account, floor(found_time / 300) * 300 AS found_time, 1 AS cnt FROM k19_ods.ntc_ip_log_local;
CREATE TABLE k19_distribute.ntc_ip_log_group_radius_account (`radius_account` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_ala_local_big', 'k19_ods', 'ntc_ip_log_local_group_radius_account', cityHash64(radius_account));

CREATE TABLE k19_ods.ntc_http_log_local_group_s_ip (`s_ip` String, `found_time` UInt32 CODEC(T64), `cnt` UInt32 CODEC(T64)) ENGINE = SummingMergeTree(cnt) PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (s_ip, found_time) TTL toDateTime(found_time) + toIntervalDay(90) SETTINGS index_granularity = 8192, merge_with_ttl_timeout = 86400, old_parts_lifetime = 60, parts_to_delay_insert = 2000, parts_to_throw_insert = 3000;
CREATE MATERIALIZED VIEW k19_ods.ntc_http_log_local_group_s_ip_view (`s_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Buffer('k19_distribute', 'ntc_http_log_group_s_ip', 2,  60, 120, 2000000, 4000000, 41943040, 104857600) AS SELECT s_ip, floor(found_time / 300) * 300 AS found_time, 1 AS cnt FROM k19_ods.ntc_http_log_local;
CREATE TABLE k19_distribute.ntc_http_log_group_s_ip (`s_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_ala_local_big', 'k19_ods', 'ntc_http_log_local_group_s_ip', cityHash64(s_ip));

CREATE TABLE k19_ods.ntc_http_log_local_group_d_ip (`d_ip` String, `found_time` UInt32 CODEC(T64), `cnt` UInt32 CODEC(T64)) ENGINE = SummingMergeTree(cnt) PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (d_ip, found_time) TTL toDateTime(found_time) + toIntervalDay(90) SETTINGS index_granularity = 8192, merge_with_ttl_timeout = 86400, old_parts_lifetime = 60, parts_to_delay_insert = 2000, parts_to_throw_insert = 3000;
CREATE MATERIALIZED VIEW k19_ods.ntc_http_log_local_group_d_ip_view (`d_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Buffer('k19_distribute', 'ntc_http_log_group_d_ip', 2,  60, 120, 2000000, 4000000, 41943040, 104857600) AS SELECT d_ip, floor(found_time / 300) * 300 AS found_time, 1 AS cnt FROM k19_ods.ntc_http_log_local;
CREATE TABLE k19_distribute.ntc_http_log_group_d_ip (`d_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_ala_local_big', 'k19_ods', 'ntc_http_log_local_group_d_ip', cityHash64(d_ip));

CREATE TABLE k19_ods.ntc_http_log_local_group_radius_account (`radius_account` String, `found_time` UInt32 CODEC(T64), `cnt` UInt32 CODEC(T64)) ENGINE = SummingMergeTree(cnt) PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (radius_account, found_time) TTL toDateTime(found_time) + toIntervalDay(90) SETTINGS index_granularity = 8192, merge_with_ttl_timeout = 86400, old_parts_lifetime = 60, parts_to_delay_insert = 2000, parts_to_throw_insert = 3000;
CREATE MATERIALIZED VIEW k19_ods.ntc_http_log_local_group_radius_account_view (`radius_account` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Buffer('k19_distribute', 'ntc_http_log_group_radius_account', 2,  60, 120, 2000000, 4000000, 41943040, 104857600) AS SELECT radius_account, floor(found_time / 300) * 300 AS found_time, 1 AS cnt FROM k19_ods.ntc_http_log_local;
CREATE TABLE k19_distribute.ntc_http_log_group_radius_account (`radius_account` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_ala_local_big', 'k19_ods', 'ntc_http_log_local_group_radius_account', cityHash64(radius_account));

CREATE TABLE k19_ods.ntc_http_log_local_group_website (`website` String, `found_time` UInt32 CODEC(T64), `cnt` UInt32 CODEC(T64)) ENGINE = SummingMergeTree(cnt) PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (website, found_time) TTL toDateTime(found_time) + toIntervalDay(90) SETTINGS index_granularity = 8192, merge_with_ttl_timeout = 86400, old_parts_lifetime = 60, parts_to_delay_insert = 2000, parts_to_throw_insert = 3000;
CREATE MATERIALIZED VIEW k19_ods.ntc_http_log_local_group_website_view (`website` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Buffer('k19_distribute', 'ntc_http_log_group_website', 2,  60, 120, 2000000, 4000000, 41943040, 104857600) AS SELECT website, floor(found_time / 300) * 300 AS found_time, 1 AS cnt FROM k19_ods.ntc_http_log_local;
CREATE TABLE k19_distribute.ntc_http_log_group_website (`website` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_ala_local_big', 'k19_ods', 'ntc_http_log_local_group_website', cityHash64(website));

CREATE TABLE k19_ods.dm_conv_log_local_group_client_ip (`client_ip` String, `found_time` UInt32 CODEC(T64), `cnt` UInt32 CODEC(T64)) ENGINE = SummingMergeTree(cnt) PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (client_ip, found_time) TTL toDateTime(found_time) + toIntervalDay(90) SETTINGS index_granularity = 8192, merge_with_ttl_timeout = 86400, old_parts_lifetime = 60, parts_to_delay_insert = 2000, parts_to_throw_insert = 3000;
CREATE MATERIALIZED VIEW k19_ods.dm_conv_log_local_group_client_ip_view (`client_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Buffer('k19_distribute', 'dm_conv_log_group_client_ip', 2,  60, 120, 2000000, 4000000, 41943040, 104857600) AS SELECT client_ip, floor(found_time / 300) * 300 AS found_time, 1 AS cnt FROM k19_ods.dm_conv_log_local;
CREATE TABLE k19_distribute.dm_conv_log_group_client_ip (`client_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_ala_local_big', 'k19_ods', 'dm_conv_log_local_group_client_ip', cityHash64(client_ip));

CREATE TABLE k19_ods.dm_conv_log_local_group_server_ip (`server_ip` String, `found_time` UInt32 CODEC(T64), `cnt` UInt32 CODEC(T64)) ENGINE = SummingMergeTree(cnt) PARTITION BY toRelativeDayNum(toDateTime(found_time)) ORDER BY (server_ip, found_time) TTL toDateTime(found_time) + toIntervalDay(90) SETTINGS index_granularity = 8192, merge_with_ttl_timeout = 86400, old_parts_lifetime = 60, parts_to_delay_insert = 2000, parts_to_throw_insert = 3000;
CREATE MATERIALIZED VIEW k19_ods.dm_conv_log_local_group_server_ip_view (`server_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Buffer('k19_distribute', 'dm_conv_log_group_server_ip', 2,  60, 120, 2000000, 4000000, 41943040, 104857600) AS SELECT server_ip, floor(found_time / 300) * 300 AS found_time, 1 AS cnt FROM k19_ods.dm_conv_log_local;
CREATE TABLE k19_distribute.dm_conv_log_group_server_ip (`server_ip` String,`found_time` UInt32 CODEC(T64), `cnt` UInt32) ENGINE = Distributed('clickhouse_ala_local_big', 'k19_ods', 'dm_conv_log_local_group_server_ip', cityHash64(server_ip));



--每张表每小时新增
CREATE MATERIALIZED VIEW k19_ods.ck_hour_increament_materialized_view_local (`eventtime` DateTime, `table` String, `rows` UInt64) ENGINE = SummingMergeTree(rows) PARTITION BY toYYYYMM(eventtime) ORDER BY (eventtime, table) TTL eventtime+INTERVAL 90 DAY SETTINGS index_granularity = 8192 POPULATE AS SELECT toDateTime(toRelativeHourNum(min(event_time)) * 3600) AS eventtime, concat(database, '.', table) AS table, sum(rows) AS rows FROM system.part_log WHERE event_type = 1 GROUP BY database, table, toRelativeHourNum(event_time) ORDER BY database ASC, table ASC, toRelativeHourNum(event_time) ASC;
--每张表每天新增
CREATE MATERIALIZED VIEW k19_ods.ck_day_increament_materialized_view_local (`eventtime` DateTime, `table` String, `rows` UInt64) ENGINE = SummingMergeTree(rows) PARTITION BY toYYYYMM(eventtime) ORDER BY (eventtime, table) TTL eventtime+INTERVAL 90 DAY SETTINGS index_granularity = 8192 POPULATE AS SELECT toDate(event_time) AS eventtime, concat(database, '.', table) AS table, sum(rows) AS rows FROM system.part_log WHERE event_type = 1 GROUP BY database, table, toDate(event_time) ORDER BY database ASC, table ASC, toDate(event_time) ASC;

----非系统表非视图非SELECT 1，非optimize剩下的insert和select语句并且加上了sql执行所在机器的serverIp
CREATE TABLE k19_ods.ck_slow_query_log_local (`eventDate` Date, `startTime` DateTime, `status` LowCardinality(String), `useSeconds` Float64, `readRows` UInt64, `resultRows` UInt64, `writeRows` UInt64, `writtenMB` Float64, `memoryUsageMB` Float64, `tableName` LowCardinality(String),`clusterName` LowCardinality(String), `serverName` LowCardinality(String), `serverIp` LowCardinality(String), `initial_query_id` UUID, `query_id` UUID, `queryFromHost` LowCardinality(String), `query` String,exception String,stack_trace String)  ENGINE =ReplacingMergeTree() PARTITION BY toYYYYMM(startTime) ORDER BY (startTime,status,clusterName,tableName,serverIp,query_id) TTL startTime+INTERVAL 90 DAY;

--系统表加上过期时间
ALTER TABLE system.metric_log MODIFY TTL event_time + toIntervalDay(90);
ALTER TABLE system.part_log MODIFY TTL event_time + toIntervalDay(90);
ALTER TABLE system.query_log MODIFY TTL event_time + toIntervalDay(90);
ALTER TABLE system.query_thread_log MODIFY TTL event_time + toIntervalDay(90);
-- ALTER TABLE system.text_log MODIFY TTL event_time + toIntervalDay(90);
ALTER TABLE system.trace_log MODIFY TTL event_time + toIntervalDay(90);
